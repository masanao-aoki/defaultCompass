@charset "utf-8";

//----------------------------------------------------------------------
// img
//----------------------------------------------------------------------
//	background-fit
//	画像のサイズを取得しbackground-size,width,heightに入れる
//	$widthFixedがfalseの場合はwidth,heightを出力しない
//	$imgには配列で複数画像を指定することが可能（その場合は$valueにpositionとrepeat必須）
//	※グラデーションも指定できます。
//
//	$img: config.rb images_dirで指定した画像（複数画像を指定できます。）
//	$widthFixed: 画像タグのサイズいっぱいに指定してテキストを消したいとき true
//	$value: 一つ目の画像をどういう配置にするか（複数指定してある場合は ("0 0 no-repeat","left top repeat")）
//	$retina: true or false
$imgWidth: ();
$imgHeight: ();
@mixin background-fit($img,$widthFixed: true,$value: '0 0 no-repeat',$important: '',$retina: $isRetina) {
	$retinaSuport: if($retina, 2, 1);
	$imgList : ();
	$widthHeightList : ();
	$width : ();
	$height : ();
	$imgWidth: ();
	$imgHeight: ();
	$num: 0;

	@each $i in $img {
		$isFile: isFile($images_dir + $i) == 'true';
		$num: $num + 1;
		
		$width: '';
		$height: '';
		$image: '';
		
		@if $isFile {
			$width: round(image-width($i) / $retinaSuport);
			$height: round(image-height($i) / $retinaSuport);
			$image: image-url($i);
		} @else {
			$width: auto;
			$height: auto;
			$image: $i;
		}
		
		$val: if(length($img) == $num and $important != '',append(unquote(nth($value,$num)),$important),unquote(nth($value,$num)));
		$whval: if(length($img) == $num and $important != '',append(join($width,$height),$important),join($width,$height));
		
		$imgList: append($imgList, join($image,$val),comma);
		$widthHeightList: append($widthHeightList, $whval,comma);
		
		$imgWidth: if(length($img) == 1,$width,append($imgWidth, $width));
		$imgHeight:  if(length($img) == 1,$height,append($imgHeight, $height));
	}
	
	@include background($imgList);
	@if $widthFixed and length($img) < 2 {
		text-indent: -9999px;
		overflow: hidden;
		width: if($important == '', $width,  unquote($width + ' ' + $important));
		height: if($important == '', $height, unquote($height + ' ' + $important));
	}
	@include background-size($widthHeightList);
}

//	image-info
//	画像の幅をとってきてくれるisRetinaがtrueの場合は2で割った数を返す
//
//	$img: config.rb images_dirで指定した画像（複数画像を指定できます。）
//	$name: width or height
//	$retina: true or false
@function image-info($img,$name,$retina: $isRetina) {
	$retinaSuport: if($retina, 2, 1);
	$width : ();
	$height : ();
	$imgWidth: ();
	$imgHeight: ();
	@each $i in $img {
		$width: image-width($i) / $retinaSuport;
		$height: image-height($i) / $retinaSuport;
		
		$imgWidth: append($imgWidth, $width);
		$imgHeight:  append($imgHeight, $height);
	}
	
	@return if($name == 'width',$imgWidth,$imgHeight)
}


//	half-image-width
//	画像の半分の値を返す（複数画像を配列で指定可能）
@function half-image-width($img) {
	$imgWidth: ();
	@each $i in $img {
		$width: image-width($i) / 2;
		
		$imgWidth: if(length($img) == 1,$width,append($imgWidth, $width));
	}
	
	@return $imgWidth
}

//	half-image-height
//	画像の半分の値を返す（複数画像を配列で指定可能）
@function half-image-height($img) {
	$imgHeight: ();
	@each $i in $img {
		$height: image-height($i) / 2;
		
		$imgHeight:  if(length($img) == 1,$height,append($imgHeight, $height));
	}
	
	@return $imgHeight
}

//----------------------------------------------------------------------
// sprite
//----------------------------------------------------------------------
//	sprite-info
//	スプライト画像のサイズとポジションを設定する
//
//	$map: スプライト画像
//	$name: スプライト画像内のスプライト化する前の画像名
//	$retina: true or false
@mixin sprite-info($map, $name, $size: true, $retina: $isRetina) {
	background-image: image-url(sprite-path($map), false, false);
	@include background-size(nth(spriteSize($map,$name,$retina),1) nth(spriteSize($map,$name,$retina),2));
	background-position: spritePosition($map,$name,$retina);
	
	@if($size) {		
		width: nth(spriteSize($map,$name,$retina),3);
		height: nth(spriteSize($map,$name,$retina),4);
	}
}

//	spriteSize
//	スプライト画像のサイズとその中の個別画像のサイズを配列で返す
//
//	$map: スプライト画像
//	$name: スプライト画像内のスプライト化する前の画像名
//	$retina: true or false
//	@return {Array} [スプライト画像の横,スプライト画像の高さ,個別画像の横,個別画像の高さ]
@function spriteSize($map, $name,$retina: $isRetina) {
	$retinaSuport: if($retina, 2, 1);
	$map : nth($map,1);
	$spriteWidth: round(image-width(sprite-path($map)) / $retinaSuport);
	$spriteHeight: round(image-height(sprite-path($map)) / $retinaSuport);

	$xpos: round(nth(sprite-position($map, $name), 1) / $retinaSuport);
	$ypos: round(nth(sprite-position($map, $name), 2) / $retinaSuport);
	$imgWidth: round(image-width(sprite-file($map, $name)) / $retinaSuport);
	$imgHeight: round(image-height(sprite-file($map, $name)) / $retinaSuport);
	
	@return ($spriteWidth,$spriteHeight,$imgWidth,$imgHeight);
}

//	spritePosition
//	スプライト画像のbackground-position
//
//	$map: スプライト画像
//	$name: スプライト画像内のスプライト化する前の画像名
//	$retina: true or false
//	@return {Array} [スプライト画像のy,スプライト画像のx]
@function spritePosition($map, $name,$retina: $isRetina) {
	$retinaSuport: if($retina, 2, 1);
	$map : nth($map,1);

	$xpos: round(nth(sprite-position($map, $name), 1) / $retinaSuport);
	$ypos: round(nth(sprite-position($map, $name), 2) / $retinaSuport);
	
	@return $xpos $ypos;
}

//----------------------------------------------------------------------
// css3
//----------------------------------------------------------------------
//	min_height
//	最大の高さ IE6にも対応させたい場合
@mixin min_height($value: 1%) {
	min-height: $value;
	@if $legacy-support-for-ie6 {
	_height: $value;
	}
}

//	inline-block
//	IE6,IE7用 にinline-blockを実装する場合
@mixin inline-block {
	display: inline-block;
	@if $legacy-support-for-ie6 or $legacy-support-for-ie7 {
		*display: inline;
		*zoom: 1;
	}
}

//	text-shadow-repeat
//	同じテキストシャドウを繰り返したい場合
$text-shadowList: ' ';
@mixin text-shadow-repeat($value: 0 0 1px rgba(0,0,0,0.3),$num : 1) {
	$text-shadowList : $value;
	@for $i from 1 through $num - 1 {
		$text-shadowList : unquote($text-shadowList + "," + $value);
	}
	text-shadow: $text-shadowList;
}

//	box-shadow-repeat
//	同じボックスシャドウを繰り返したい場合
$box-shadowList: ' ';
@mixin box-shadow-repeat($value: 0 0 1px rgba(0,0,0,0.3),$num : 1) {
	$box-shadowList : $value;
	@for $i from 1 through $num - 1 {
		$box-shadowList : unquote($box-shadowList + "," + $value);
	}
	box-shadow: $box-shadowList;
}

//	display-box-center
//	display: box;にし縦横をcenter寄せに
@mixin display-box-center() {
	@include display-box;
	@include box-align(center);
	@include box-pack(center);
}

//	triangle-set
//	作った三角形を$dirに合わせてボックスの外側にセットする
$size: '';
@mixin triangle-set($num: 10px,$color: black,$dir: top,$position: 50%,$selecter: after) {
	$size: nth($num,1) / 2;
	$h: '';
	@if length($num) == 1 {
		$h: $num;
	} @else {
		$h: nth($num,2);
	}
	$direction: if($dir == top,bottom,if($dir == bottom,top,if($dir == left,right,if($dir == right,left,''))));
	&#{':' + $selecter} {
		@include triangle($num,$color,$dir);
		#{$dir}: -($size + $h);
		position: absolute;
		@if($position != false) {
			#{if($dir == left or $dir == right,top,left)}: $position;
			@if($position == 50%) {
				margin-#{if($dir == left or $dir == right,top,left)}: -$size;
			}
		}
	}
}

//	triangle
//	三角形を作る
@mixin triangle($num: 10px 10px,$color: black,$dir: top) {
	$size: nth($num,1) / 2;
	$h: '';
	@if length($num) == 1 {
		$h: $num;
	} @else {
		$h: nth($num,2);
	}
	$direction: if($dir == top,bottom,if($dir == bottom,top,if($dir == left,right,if($dir == right,left,''))));
	content: "";
	font-size: 0;
	border: $size solid transparent;
	border-#{$direction}-color: $color;
	border-#{$direction}-width: $h;
}

//	background-4corners
//	4つ角に同じ画像を回転・反転させておきたい場合
@mixin background-4corners($img,$retina: $isRetina) {
	$retinaSuport: if($retina, 2, 1);
	$width: round(image-width($img) / $retinaSuport);
	$height: round(image-height($img) / $retinaSuport);
	
	&:after,
	&:before {
		content: '';
		display: block;
		background: image-url($img) 0 0 no-repeat;
		background-size: $width $height;
		width: 50%;
		height: $height;
		position: absolute;
		-webkit-box-reflect: right;
	}
	
	&:before {
		top: 0;
		left: 0;
	}
	
	&:after {
    	right: 0;
    	bottom: 0;
		-webkit-transform:rotate(-180deg);
	}
}

//----------------------------------------------------------------------
// font-size
//----------------------------------------------------------------------
$fontSizeDefault: 13;
$fontSizefz: ' ';
@function fz($size) {
	$fontSizefz: $size / $fontSizeDefault;
	@return $fontSizefz * 100%;
}

@function fs($size, $context, $unit:em){
	@if $unit == '%' {
		@return #{$size/$context*100}#{$unit};
	} @else {
		@return #{$size/$context}#{$unit};
	}
}

@mixin fz($size) {
    $rem_num: ($size / $fontSizeDefault);
    $num: round-decimal($rem_num, 2);
    font-size: $size * 1px;
    font-size: #{$num}rem;
}

//----------------------------------------------------------------------
// ratio 黄金比 白銀比の計算
//----------------------------------------------------------------------

//	golden-ratio
//	黄金比の計算
// $num: 基準にしたい値
//	@return {Array}
@function golden-ratio($num) {
	@return round($num * 0.618)
}

//	silver-ratio
//	白銀比の計算
// $num: 基準にしたい値
//	@return {Array}
@function silver-ratio($num) {
	@return round($num * 0.414)
}

//----------------------------------------------------------------------
// clearfix
//----------------------------------------------------------------------
@mixin clearfix() {
.clearfix {
	@if $legacy-support-for-ie7 {
	min-height: 1px;
	}
	@if $legacy-support-for-ie6 {
	_height: 1%;
	}
	&:after {
		content: ".";
		display: block;
		clear: both;
		height: 0;
		visibility: hidden;
	}
}
}